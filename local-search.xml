<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CS61A</title>
    <link href="/2022/07/01/CS61A/"/>
    <url>/2022/07/01/CS61A/</url>
    
    <content type="html"><![CDATA[<p><a href="https://inst.eecs.berkeley.edu/~cs61a/sp21/">CS61A</a></p><p>抽象:</p><ul><li>从简单到复杂，嵌套</li><li>抽象成名字，离开具体数据</li></ul><h1 id="DAY1"><a href="#DAY1" class="headerlink" title="DAY1"></a>DAY1</h1><p><strong>1.Use Git Bash as terminal in Windows</strong></p><p><a href="https://inst.eecs.berkeley.edu/~cs61a/sp21/articles/vscode/#pair-programming">Visual Stdio Code</a></p><p>The <strong>home directory</strong> is represented by the <code>~</code> symbol</p><p>the prompt shows <code>$</code> (indicating Bash), <code>%</code> (indicating zsh), or <code>PS</code> (PowerShell). </p><ul><li><code>cd ~</code> (the tilde). Remember that <code>~</code> means home directory, so this command will always change to your home directory.</li><li><code>cd ~</code> (the tilde). Remember that <code>~</code> means home directory, so this command will always change to your home directory.</li><li>cd <del>/Desktop也可以使用绝对路径(从`</del>`开始)</li><li><code>mv &lt;source path&gt; &lt;destination path&gt;</code>: <strong>m</strong>o<strong>v</strong>e the file at the given source to the given destination</li><li>type <code>open .</code> on MacOS or <code>start .</code> on Windows to open the current directory in your Finder/File Explorer.</li><li><a href="https://inst.eecs.berkeley.edu/~cs61a/sp21/articles/unix">UNIX tutorial</a></li></ul><p>An <code>*expression*</code> is a piece of code that evaluates to some value and a <code>*statement* </code>is one or more lines of code that make something happen in a program.</p><ol><li>Compute some value</li><li>Carry out some action</li></ol><p>there are three division-like operators to remember:</p><ul><li>Floating point division (<code>/</code>): divides the first number number by the second, evaluating to a number with a decimal point <em>even if the numbers divide evenly</em>.</li><li>Floor division (<code>//</code>): divides the first number by the second and then rounds down, evaluating to an integer.</li><li>Modulo (<code>%</code>): evaluates to the positive remainder left over from division.</li></ul><p>2.Using OK autograder</p><p><a href="https://inst.eecs.berkeley.edu/~cs61a/sp21/articles/using-ok/#signing-in-with-ok">Using OK</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">python3 ok -<span class="hljs-selector-tag">q</span> question <span class="hljs-attr">--local</span> 本地判题,不上传备份(windows use python)<br></code></pre></td></tr></table></figure><p>you may find it useful at times to write some of your own tests in the form of <a href="https://inst.eecs.berkeley.edu/~cs61a/sp21/lab/lab00/#understanding-problems">doctests</a>. Then, you can try them out using the <code>-m doctest</code> <a href="https://inst.eecs.berkeley.edu/~cs61a/sp21/lab/lab00/#appendix-useful-python-command-line-options">option for Python</a>).</p><h3 id="Expression"><a href="#Expression" class="headerlink" title="Expression"></a>Expression</h3><ol><li>Expression</li><li>Call Expression<img src="/2022/07/01/CS61A/../Pictures/CS61A/image-20220701183804706.png" alt="image-20220701183804706" style="zoom:25%;"></li><li> <a href="http://docs.python.org/py3k/library/index.html">Python 3 Library Docs</a></li></ol><p>给函数赋名字</p><p>We can use assignment statements to give new names to existing functions.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-built_in">max</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f<br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">max</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>f(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span> = <span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>After assigning <code>max</code> to 5, the name <code>max</code> is no longer bound to a function, and so attempting to call <code>max(2, 3, 4)</code> will cause an error.</p><p>先算左值再算右值</p><p>With multiple assignment, <em>all</em> expressions to the right of <code>=</code> are evaluated before <em>any</em> names to the left are bound to those values. As a result of this rule, swapping the values bound to two names can be performed in a single statement.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x, y = <span class="hljs-number">3</span>, <span class="hljs-number">4.5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y, x = x, y<br><span class="hljs-meta">&gt;&gt;&gt; </span>x<br><span class="hljs-number">4.5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>the evaluation procedure of nested expression is recursive in nature.</p><p><strong>Pure functions.</strong> Functions have some input (their arguments) and return some output (the result of applying them).没有副作用</p><p><strong>The Non-Pure Print Function</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>))<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-literal">None</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p> pure function能更安心地嵌套和用来测试</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CS61B</title>
    <link href="/2022/07/01/CS61B/"/>
    <url>/2022/07/01/CS61B/</url>
    
    <content type="html"><![CDATA[<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><ol><li>install JDk &amp;IDEA</li><li>using Git</li><li>learn debug in IDEA</li><li>a little sytax about JAVA(conditional\Loop)</li></ol><h4 id="finished"><a href="#finished" class="headerlink" title="finished:"></a>finished:</h4><ul><li>Lab1</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Summer 2022</title>
    <link href="/2022/06/04/Summer-2022/"/>
    <url>/2022/06/04/Summer-2022/</url>
    
    <content type="html"><![CDATA[<h2 id="Summer-Classes"><a href="#Summer-Classes" class="headerlink" title="Summer Classes:"></a>Summer Classes:</h2><ul><li><h4 id="Introduction-to-Computer-System—-Yale-Patt"><a href="#Introduction-to-Computer-System—-Yale-Patt" class="headerlink" title="Introduction to Computer System—-Yale Patt"></a><strong>Introduction to Computer System</strong>—-Yale Patt</h4><ul><li>July 11-27,2022</li></ul></li><li><h4 id="Android实训—-Byte-Dance-Company"><a href="#Android实训—-Byte-Dance-Company" class="headerlink" title="Android实训—-Byte Dance Company"></a><strong>Android实训</strong>—-Byte Dance Company</h4><ul><li>Aug 29-Sept 9,2022</li></ul></li></ul><p><img src="/2022/06/04/Summer-2022/patt.png" alt="1"></p><p><img src="/2022/06/04/Summer-2022/ad.png" alt="2"></p><h2 id="Learn-by-Yourself"><a href="#Learn-by-Yourself" class="headerlink" title="Learn by Yourself"></a>Learn by Yourself</h2><ul><li><h4 id="Object-Oriented-Programming-PKU-amp-wk-in-zhiyun"><a href="#Object-Oriented-Programming-PKU-amp-wk-in-zhiyun" class="headerlink" title="Object-Oriented Programming(PKU &amp; wk in zhiyun)"></a>Object-Oriented Programming(PKU &amp; wk in zhiyun)</h4></li><li><h4 id="Data-Structure-amp-Algorithm-cyll"><a href="#Data-Structure-amp-Algorithm-cyll" class="headerlink" title="Data Structure &amp; Algorithm(cyll)"></a>Data Structure &amp; Algorithm(cyll)</h4></li><li><h4 id="Database-System-CMU-15-445"><a href="#Database-System-CMU-15-445" class="headerlink" title="Database System(CMU 15-445)"></a>Database System(CMU 15-445)</h4></li></ul><p><img src="/2022/06/04/Summer-2022/cmu.png" alt="3"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
